outcomeMatchList <- grepl(regPat, outNames, ignore.case = TRUE)
outNames <- outNames[outcomeMatchList]
}
outNames
myoutc <- c('hospital','mortality', outcome)
#outcomeMatchList <- grepl('mortality', names(dfCareMeasure), ignore.case = TRUE)
outcomeMatchList <- sapply(myoutc, grepl, names(dfCareMeasure), ignore.case = TRUE)
outNames <- names(dfCareMeasure)
for (regPat in myoutc){
print(regPat)
outcomeMatchList <- grepl(regPat, outNames, ignore.case = TRUE)
outNames <- outNames[outcomeMatchList]
}
outNames
outNames <- grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)
for (regPat in myoutc){
print(regPat)
outcomeMatchList <- grepl(regPat, outNames, ignore.case = TRUE)
outNames <- outNames[outcomeMatchList]
}
outNames
outNames <- grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)
outNames
outNames <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
outNames
outNames <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
print(regPat)
outcomeMatchList <- grepl(regPat, outNames, ignore.case = TRUE)
outNames <- outNames[outcomeMatchList]
}
outNames
outComeList <- 'heart attack'
strsplit(outComeList, ' ')
unlist(strsplit(outComeList, ' '))
outcome <- 'heart failure'
#outcome <- paste('mortality*', outcome)
#cat(outcome)
myoutc <- c('hospital','mortality', unlist(strsplit(outcome, ' ')))
#outcomeMatchList <- grepl('mortality', names(dfCareMeasure), ignore.case = TRUE)
outcomeMatchList <- sapply(myoutc, grepl, names(dfCareMeasure), ignore.case = TRUE)
outNames <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
print(regPat)
outcomeMatchList <- grepl(regPat, outNames, ignore.case = TRUE)
outNames <- outNames[outcomeMatchList]
}
outNames
myoutc <- c('hospital','mortality', unlist(strsplit(outcome, ' ')))
OutcomecolName <- sapply(myoutc, grepl, names(dfCareMeasure), ignore.case = TRUE)
OutcomecolName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomecolName, ignore.case = TRUE)
OutcomecolName <- OutcomecolName[outcomeMatchList]
}
OutcomecolName
myoutc
outcome
source('best.R')
best('AL', 'heart attack')
outcome = 'heart attack'
# strings to be matched
myoutc <- c('hospital','mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- sapply(myoutc, grepl, names(dfCareMeasure), ignore.case = TRUE)
OutcomeColName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
}
print(OutcomecolName)
outcome
myoutc
OutcomecolName
outcome = 'heart attack'
# strings to be matched
myoutc <- c('hospital','mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
}
print(OutcomecolName)
outcome = 'heart attack'
# strings to be matched
myoutc <- c('hospital','mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)
OutcomeColName
for (regPat in myoutc){
print(OutcomeColName)
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
}
print(OutcomecolName)
for (regPat in myoutc){
print(c(OutcomeColName, regPat))
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
}
OutcomeColName <- names(dfCareMeasure)
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
print(c(OutcomeColName, regPat))
}
outcome = 'heart attack'
# strings to be matched
myoutc <- c('mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
print(c(OutcomeColName, regPat))
}
OutcomecolName
outcome = 'heart attack'
# strings to be matched
myoutc <- c('mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
#print(c(OutcomeColName, regPat))
}
print(OutcomeColName)
outcome = 'heart failure'
# strings to be matched
myoutc <- c('mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
#print(c(OutcomeColName, regPat))
}
print(OutcomeColName)
outcome = 'pneumonia'
# strings to be matched
myoutc <- c('mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
#print(c(OutcomeColName, regPat))
}
print(OutcomeColName)
source('best.R')
source('best.R')
rm(list=ls())
source('best.R')
best('AL', 'heart attack')
source('best.R')
best('AL', 'heart attack')
submit()
source('rprog-scripts-submitscript3.R')
submit()
submit(manual = T)
submit(manual = T)
submit(manual = T)
q()
source('rankhospital.R')
rankhospital("TX", "heart failuer", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", "best")
head(dfCareMeasure)
rankhospital("TX", "heart failure")
dfCareMeasure <- read.csv('data/outcome-of-care-measures.csv',
colClasses = 'character',
na.strings='NA')
source('rankhospital.R')
rankhospital("TX", "heart failure")
rm(list=ls())
source('rankhospital.R')
rankhospital("TX", "heart failure")
rankhospital("dd", "heart failure")
dfCareMeasure <- read.csv('data/outcome-of-care-measures.csv',
colClasses = 'character',
na.strings='NA')
hospitalCount <- nrow(unique(dfCareMeasure[,1]))
dfCareMeasure[,1]
unique(dfCareMeasure[,1])
nrow(unique(dfCareMeasure[,1]))
nrow(data.frame(unique(dfCareMeasure[,1])))
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital("dd", "heart failure")
rankhospital("MN", "heart failure")
rankhospital("MN", "heart failure", 5000)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital("MN", "heart failure", 5000)
rankhospital("MN", "heart failure")
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital("MN", "heart failure")
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital("MN", "heart failure")
rankhospital("TX", "heart failure")
?order
str(dfCareMeasure.state)
str(data.table(dfCareMeasure.state))
dfCareMeasure.state <- dfCareMeasure[dfCareMeasure$State==state,]
dfCareMeasure <- read.csv('data/outcome-of-care-measures.csv',
colClasses = 'character',
na.strings='NA')
# validate state
stateList <- unique(dfCareMeasure[,7])
if (!state %in% stateList) {
stop('Invalid state code')
}
# validate outcome
outComeList <- c('heart attack', 'heart failure', 'pneumonia')
if (!outcome %in% outComeList){
stop('Invalid Outcome')
}
hospitalCount <- nrow(data.frame(unique(dfCareMeasure[,1])))
if (num == 'best'){
choiceRank = 1
}else if (num == 'worst'){
choiceRank = -1
}else if (num > hospitalCount){
return (NA)
}else {
choiceRank = num
}
# strings to be matched
myoutc <- c('mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
}
## Return hospital name in that state with lowest 30-day death rate
dfCareMeasure.state <- dfCareMeasure[dfCareMeasure$State==state,]
#idx <- which.min(as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp <- order(as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp2 <- (as.double(dfCareMeasure.state[,OutcomeColName]))
state <- "TX"
outcome <- "heart attack"
dfCareMeasure <- read.csv('data/outcome-of-care-measures.csv',
colClasses = 'character',
na.strings='NA')
# validate state
stateList <- unique(dfCareMeasure[,7])
if (!state %in% stateList) {
stop('Invalid state code')
}
# validate outcome
outComeList <- c('heart attack', 'heart failure', 'pneumonia')
if (!outcome %in% outComeList){
stop('Invalid Outcome')
}
hospitalCount <- nrow(data.frame(unique(dfCareMeasure[,1])))
if (num == 'best'){
choiceRank = 1
}else if (num == 'worst'){
choiceRank = -1
}else if (num > hospitalCount){
return (NA)
}else {
choiceRank = num
}
# strings to be matched
myoutc <- c('mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
}
## Return hospital name in that state with lowest 30-day death rate
dfCareMeasure.state <- dfCareMeasure[dfCareMeasure$State==state,]
#idx <- which.min(as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp <- order(as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp2 <- (as.double(dfCareMeasure.state[,OutcomeColName]))
str(dfCareMeasure.state)
dfCareMeasure.state[,OutcomeColName]
head(dfCareMeasure.state[,OutcomeColName])
dfCareMeasure <- read.csv('data/outcome-of-care-measures.csv',
colClasses = 'character',
na.strings='Not Available')
# validate state
stateList <- unique(dfCareMeasure[,7])
if (!state %in% stateList) {
stop('Invalid state code')
}
# validate outcome
outComeList <- c('heart attack', 'heart failure', 'pneumonia')
if (!outcome %in% outComeList){
stop('Invalid Outcome')
}
hospitalCount <- nrow(data.frame(unique(dfCareMeasure[,1])))
if (num == 'best'){
choiceRank = 1
}else if (num == 'worst'){
choiceRank = -1
}else if (num > hospitalCount){
return (NA)
}else {
choiceRank = num
}
# strings to be matched
myoutc <- c('mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
}
## Return hospital name in that state with lowest 30-day death rate
dfCareMeasure.state <- dfCareMeasure[dfCareMeasure$State==state,]
#idx <- which.min(as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp <- order(as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp2 <- (as.double(dfCareMeasure.state[,OutcomeColName]))
num <- 5
dfCareMeasure <- read.csv('data/outcome-of-care-measures.csv',
colClasses = 'character',
na.strings='Not Available')
# validate state
stateList <- unique(dfCareMeasure[,7])
if (!state %in% stateList) {
stop('Invalid state code')
}
# validate outcome
outComeList <- c('heart attack', 'heart failure', 'pneumonia')
if (!outcome %in% outComeList){
stop('Invalid Outcome')
}
hospitalCount <- nrow(data.frame(unique(dfCareMeasure[,1])))
if (num == 'best'){
choiceRank = 1
}else if (num == 'worst'){
choiceRank = -1
}else if (num > hospitalCount){
return (NA)
}else {
choiceRank = num
}
# strings to be matched
myoutc <- c('mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
}
## Return hospital name in that state with lowest 30-day death rate
dfCareMeasure.state <- dfCareMeasure[dfCareMeasure$State==state,]
#idx <- which.min(as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp <- order(as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp2 <- (as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp
orderedHosp2
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
state = 'TX'
outcome = 'heart attack'
num = 5
dfCareMeasure <- read.csv('data/outcome-of-care-measures.csv',
colClasses = 'character',
na.strings='Not Available')
# validate state
stateList <- unique(dfCareMeasure[,7])
if (!state %in% stateList) {
stop('Invalid state code')
}
# validate outcome
outComeList <- c('heart attack', 'heart failure', 'pneumonia')
if (!outcome %in% outComeList){
stop('Invalid Outcome')
}
hospitalCount <- nrow(data.frame(unique(dfCareMeasure[,1])))
if (num == 'best'){
choiceRank = 1
}else if (num == 'worst'){
choiceRank = -1
}else if (num > hospitalCount){
return (NA)
}else {
choiceRank = num
}
# strings to be matched
myoutc <- c('mortality', unlist(strsplit(outcome, ' ')))
OutcomeColName <- names(dfCareMeasure)[grepl('^hospital', names(dfCareMeasure), ignore.case = TRUE)]
for (regPat in myoutc){
outcomeMatchList <- grepl(regPat, OutcomeColName, ignore.case = TRUE)
OutcomeColName <- OutcomeColName[outcomeMatchList]
}
## Return hospital name in that state with lowest 30-day death rate
dfCareMeasure.state <- dfCareMeasure[dfCareMeasure$State==state,]
#idx <- which.min(as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp <- order(as.double(dfCareMeasure.state[,OutcomeColName]))
orderedHosp2 <- (as.double(dfCareMeasure.state[,OutcomeColName]))
library(dplyr)
dfCareMeasure.ranked <- arrange(dfCareMeasure.state, OutcomeColName)
dfCareMeasure.ranked <- arrange(data.table(dfCareMeasure.state), OutcomeColName)
library(data.table)
dfCareMeasure.ranked <- arrange(data.table(dfCareMeasure.state), OutcomeColName)
head(dfCareMeasure.ranked)
summary(dfCareMeasure.ranked)
?select
select(dfCareMeasure.ranked, Provider.Number, OutcomeColName)
OutcomeColName
select(dfCareMeasure.ranked, Provider.Number, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")
select(dfCareMeasure.ranked, c(Provider.Number, "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"))
select(dfCareMeasure.ranked, Provider.Number, 7)
select(dfCareMeasure.ranked, Provider.Number, 3)
nrow(dfCareMeasure.ranked)
dfCareMeasure
nrow(dfCareMeasure)
nrow(dfCareMeasure[dfCareMeasure$State == "TX"])
nrow(dfCareMeasure[dfCareMeasure$State == "TX",])
nrow(dfCareMeasure[dfCareMeasure$State == state,])
dfCareMeasure.state <- dfCareMeasure[dfCareMeasure$State==state,]
dfCareMeasure.state
nrow(dfCareMeasure.ranked)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital("MN", "heart failure")
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital("MN", "heart failure")
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital("MN", "heart failure")
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital("MN", "heart failure")
rankhospital("TX", "heart failure")
rankhospital("TX", "heart failure", "best")
rankhospital("TX", "heart failure", "worst")
rankhospital("TX", "heart failure", 5000)
rankhospital("TX", "heart failure", 500)
rankhospital("TX", "heart failure", 50)
rankhospital("TX", "heart failure", 5)
rankhospital("TX", "heart failure", 2)
source('rprog-scripts-submitscript3.R')
submit(manual = T)
submit(manual = T)
submit(manual = T)
submit(manual = T)
?level
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
head(rankall('heart attack', 2), 10)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
head(rankall('heart attack', 2), 10)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
head(rankall('heart attack', 2), 10)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
head(rankall('heart attack', 2), 10)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
head(rankall('heart attack', 2), 10)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
head(rankall('heart attack', 2), 10)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
dfCareMeasure <- read.csv('data/outcome-of-care-measures.csv',
colClasses = 'character',
na.strings='Not Available')
# validate state
stateList <- unique(dfCareMeasure[,7])
if (!state %in% stateList) {
stop('Invalid state code')
}
result <- data.frame()
for (state in stateList){
hospital <- rankhospital(state, outcome, num)
result <- rbind(result, as.data.frame(hospital, state))
}
result
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
head(rankall('heart attack', 2), 10)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
rankall('heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
rankall('heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
rankall('heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
rankall('heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
rankall('heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
dfCareMeasure <- read.csv('data/outcome-of-care-measures.csv',
colClasses = 'character',
na.strings='Not Available')
# validate state
stateList <- unique(dfCareMeasure[,7])
if (!state %in% stateList) {
stop('Invalid state code')
}
result <- data.frame()
for (state in stateList){
hospital <- rankhospital(state, outcome, num)
if(!hospital %in% 'NA'){
result <- rbind(result, data.frame(hospital, state))
}
}
result
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
rankall('heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
rankall('heart attack', 2)
rankhospital('GU','heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital('GU','heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital('GU','heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital('GU','heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankhospital.R')
rankhospital('GU','heart attack', 2)
rankhospital('GU','heart attack', 1)
rankall('heart attack', 2)
source('D:/DesktopBackup/114706/moba/mobahome/temp/coursework/ProgrammingAssignment3/rankall.R')
rankall('heart attack', 2)
submit(manual = T)
submit(manual = T)
submit(manual = T)
q()
